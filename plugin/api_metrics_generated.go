// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make pluginapi"
// DO NOT EDIT

package plugin

import (
	"io"
	"net/http"
	timePkg "time"

	"github.com/mattermost/mattermost-server/v5/einterfaces"
	"github.com/mattermost/mattermost-server/v5/model"
)

type apiMetricsWrapper struct {
	pluginID string
	apiImpl  API
	metrics  einterfaces.MetricsInterface
}

func (api *apiMetricsWrapper) recordTime(startTime timePkg.Time, name string) {
	if api.metrics != nil {
		elapsedTime := float64(timePkg.Since(startTime)) / float64(timePkg.Second)
		api.metrics.ObservePluginApiDuration(api.pluginID, name, elapsedTime)
	}
}

func (api *apiMetricsWrapper) LoadPluginConfiguration(dest interface{}) error {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.LoadPluginConfiguration(dest)
	api.recordTime(startTime, "LoadPluginConfiguration")
	return _returnsA
}

func (api *apiMetricsWrapper) RegisterCommand(command *model.Command) error {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.RegisterCommand(command)
	api.recordTime(startTime, "RegisterCommand")
	return _returnsA
}

func (api *apiMetricsWrapper) UnregisterCommand(teamId, trigger string) error {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.UnregisterCommand(teamId, trigger)
	api.recordTime(startTime, "UnregisterCommand")
	return _returnsA
}

func (api *apiMetricsWrapper) GetSession(sessionId string) (*model.Session, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetSession(sessionId)
	api.recordTime(startTime, "GetSession")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetConfig() *model.Config {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.GetConfig()
	api.recordTime(startTime, "GetConfig")
	return _returnsA
}

func (api *apiMetricsWrapper) GetUnsanitizedConfig() *model.Config {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.GetUnsanitizedConfig()
	api.recordTime(startTime, "GetUnsanitizedConfig")
	return _returnsA
}

func (api *apiMetricsWrapper) SaveConfig(config *model.Config) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.SaveConfig(config)
	api.recordTime(startTime, "SaveConfig")
	return _returnsA
}

func (api *apiMetricsWrapper) GetPluginConfig() map[string]interface{} {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.GetPluginConfig()
	api.recordTime(startTime, "GetPluginConfig")
	return _returnsA
}

func (api *apiMetricsWrapper) SavePluginConfig(config map[string]interface{}) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.SavePluginConfig(config)
	api.recordTime(startTime, "SavePluginConfig")
	return _returnsA
}

func (api *apiMetricsWrapper) GetBundlePath() (string, error) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetBundlePath()
	api.recordTime(startTime, "GetBundlePath")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetLicense() *model.License {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.GetLicense()
	api.recordTime(startTime, "GetLicense")
	return _returnsA
}

func (api *apiMetricsWrapper) GetServerVersion() string {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.GetServerVersion()
	api.recordTime(startTime, "GetServerVersion")
	return _returnsA
}

func (api *apiMetricsWrapper) GetSystemInstallDate() (int64, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetSystemInstallDate()
	api.recordTime(startTime, "GetSystemInstallDate")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetDiagnosticId() string {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.GetDiagnosticId()
	api.recordTime(startTime, "GetDiagnosticId")
	return _returnsA
}

func (api *apiMetricsWrapper) CreateUser(user *model.User) (*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreateUser(user)
	api.recordTime(startTime, "CreateUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) DeleteUser(userId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DeleteUser(userId)
	api.recordTime(startTime, "DeleteUser")
	return _returnsA
}

func (api *apiMetricsWrapper) GetUsers(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUsers(options)
	api.recordTime(startTime, "GetUsers")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetUser(userId string) (*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUser(userId)
	api.recordTime(startTime, "GetUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetUserByEmail(email string) (*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUserByEmail(email)
	api.recordTime(startTime, "GetUserByEmail")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetUserByUsername(name string) (*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUserByUsername(name)
	api.recordTime(startTime, "GetUserByUsername")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetUsersByUsernames(usernames []string) ([]*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUsersByUsernames(usernames)
	api.recordTime(startTime, "GetUsersByUsernames")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetUsersInTeam(teamId string, page int, perPage int) ([]*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUsersInTeam(teamId, page, perPage)
	api.recordTime(startTime, "GetUsersInTeam")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeamIcon(teamId string) ([]byte, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamIcon(teamId)
	api.recordTime(startTime, "GetTeamIcon")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SetTeamIcon(teamId string, data []byte) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.SetTeamIcon(teamId, data)
	api.recordTime(startTime, "SetTeamIcon")
	return _returnsA
}

func (api *apiMetricsWrapper) RemoveTeamIcon(teamId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.RemoveTeamIcon(teamId)
	api.recordTime(startTime, "RemoveTeamIcon")
	return _returnsA
}

func (api *apiMetricsWrapper) UpdateUser(user *model.User) (*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateUser(user)
	api.recordTime(startTime, "UpdateUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetUserStatus(userId string) (*model.Status, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUserStatus(userId)
	api.recordTime(startTime, "GetUserStatus")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetUserStatusesByIds(userIds []string) ([]*model.Status, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUserStatusesByIds(userIds)
	api.recordTime(startTime, "GetUserStatusesByIds")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateUserStatus(userId, status string) (*model.Status, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateUserStatus(userId, status)
	api.recordTime(startTime, "UpdateUserStatus")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateUserActive(userId string, active bool) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.UpdateUserActive(userId, active)
	api.recordTime(startTime, "UpdateUserActive")
	return _returnsA
}

func (api *apiMetricsWrapper) GetUsersInChannel(channelId, sortBy string, page, perPage int) ([]*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetUsersInChannel(channelId, sortBy, page, perPage)
	api.recordTime(startTime, "GetUsersInChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetLDAPUserAttributes(userId string, attributes []string) (map[string]string, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetLDAPUserAttributes(userId, attributes)
	api.recordTime(startTime, "GetLDAPUserAttributes")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) CreateTeam(team *model.Team) (*model.Team, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreateTeam(team)
	api.recordTime(startTime, "CreateTeam")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) DeleteTeam(teamId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DeleteTeam(teamId)
	api.recordTime(startTime, "DeleteTeam")
	return _returnsA
}

func (api *apiMetricsWrapper) GetTeams() ([]*model.Team, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeams()
	api.recordTime(startTime, "GetTeams")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeam(teamId string) (*model.Team, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeam(teamId)
	api.recordTime(startTime, "GetTeam")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeamByName(name string) (*model.Team, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamByName(name)
	api.recordTime(startTime, "GetTeamByName")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeamsUnreadForUser(userId string) ([]*model.TeamUnread, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamsUnreadForUser(userId)
	api.recordTime(startTime, "GetTeamsUnreadForUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateTeam(team *model.Team) (*model.Team, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateTeam(team)
	api.recordTime(startTime, "UpdateTeam")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SearchTeams(term string) ([]*model.Team, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.SearchTeams(term)
	api.recordTime(startTime, "SearchTeams")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeamsForUser(userId string) ([]*model.Team, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamsForUser(userId)
	api.recordTime(startTime, "GetTeamsForUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) CreateTeamMember(teamId, userId string) (*model.TeamMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreateTeamMember(teamId, userId)
	api.recordTime(startTime, "CreateTeamMember")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) CreateTeamMembers(teamId string, userIds []string, requestorId string) ([]*model.TeamMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreateTeamMembers(teamId, userIds, requestorId)
	api.recordTime(startTime, "CreateTeamMembers")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) CreateTeamMembersGracefully(teamId string, userIds []string, requestorId string) ([]*model.TeamMemberWithError, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreateTeamMembersGracefully(teamId, userIds, requestorId)
	api.recordTime(startTime, "CreateTeamMembersGracefully")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) DeleteTeamMember(teamId, userId, requestorId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DeleteTeamMember(teamId, userId, requestorId)
	api.recordTime(startTime, "DeleteTeamMember")
	return _returnsA
}

func (api *apiMetricsWrapper) GetTeamMembers(teamId string, page, perPage int) ([]*model.TeamMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamMembers(teamId, page, perPage)
	api.recordTime(startTime, "GetTeamMembers")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeamMember(teamId, userId string) (*model.TeamMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamMember(teamId, userId)
	api.recordTime(startTime, "GetTeamMember")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeamMembersForUser(userId string, page int, perPage int) ([]*model.TeamMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamMembersForUser(userId, page, perPage)
	api.recordTime(startTime, "GetTeamMembersForUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateTeamMemberRoles(teamId, userId, newRoles string) (*model.TeamMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateTeamMemberRoles(teamId, userId, newRoles)
	api.recordTime(startTime, "UpdateTeamMemberRoles")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) CreateChannel(channel *model.Channel) (*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreateChannel(channel)
	api.recordTime(startTime, "CreateChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) DeleteChannel(channelId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DeleteChannel(channelId)
	api.recordTime(startTime, "DeleteChannel")
	return _returnsA
}

func (api *apiMetricsWrapper) GetPublicChannelsForTeam(teamId string, page, perPage int) ([]*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPublicChannelsForTeam(teamId, page, perPage)
	api.recordTime(startTime, "GetPublicChannelsForTeam")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannel(channelId string) (*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannel(channelId)
	api.recordTime(startTime, "GetChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelByName(teamId, name string, includeDeleted bool) (*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelByName(teamId, name, includeDeleted)
	api.recordTime(startTime, "GetChannelByName")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelByNameForTeamName(teamName, channelName string, includeDeleted bool) (*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelByNameForTeamName(teamName, channelName, includeDeleted)
	api.recordTime(startTime, "GetChannelByNameForTeamName")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelsForTeamForUser(teamId, userId string, includeDeleted bool) ([]*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelsForTeamForUser(teamId, userId, includeDeleted)
	api.recordTime(startTime, "GetChannelsForTeamForUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelStats(channelId string) (*model.ChannelStats, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelStats(channelId)
	api.recordTime(startTime, "GetChannelStats")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetDirectChannel(userId1, userId2 string) (*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetDirectChannel(userId1, userId2)
	api.recordTime(startTime, "GetDirectChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetGroupChannel(userIds []string) (*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetGroupChannel(userIds)
	api.recordTime(startTime, "GetGroupChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateChannel(channel *model.Channel) (*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateChannel(channel)
	api.recordTime(startTime, "UpdateChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SearchChannels(teamId string, term string) ([]*model.Channel, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.SearchChannels(teamId, term)
	api.recordTime(startTime, "SearchChannels")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SearchUsers(search *model.UserSearch) ([]*model.User, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.SearchUsers(search)
	api.recordTime(startTime, "SearchUsers")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SearchPostsInTeam(teamId string, paramsList []*model.SearchParams) ([]*model.Post, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.SearchPostsInTeam(teamId, paramsList)
	api.recordTime(startTime, "SearchPostsInTeam")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) AddChannelMember(channelId, userId string) (*model.ChannelMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.AddChannelMember(channelId, userId)
	api.recordTime(startTime, "AddChannelMember")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) AddUserToChannel(channelId, userId, asUserId string) (*model.ChannelMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.AddUserToChannel(channelId, userId, asUserId)
	api.recordTime(startTime, "AddUserToChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelMember(channelId, userId string) (*model.ChannelMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelMember(channelId, userId)
	api.recordTime(startTime, "GetChannelMember")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelMembers(channelId string, page, perPage int) (*model.ChannelMembers, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelMembers(channelId, page, perPage)
	api.recordTime(startTime, "GetChannelMembers")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelMembersByIds(channelId string, userIds []string) (*model.ChannelMembers, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelMembersByIds(channelId, userIds)
	api.recordTime(startTime, "GetChannelMembersByIds")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetChannelMembersForUser(teamId, userId string, page, perPage int) ([]*model.ChannelMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetChannelMembersForUser(teamId, userId, page, perPage)
	api.recordTime(startTime, "GetChannelMembersForUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateChannelMemberRoles(channelId, userId, newRoles string) (*model.ChannelMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateChannelMemberRoles(channelId, userId, newRoles)
	api.recordTime(startTime, "UpdateChannelMemberRoles")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateChannelMemberNotifications(channelId, userId string, notifications map[string]string) (*model.ChannelMember, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateChannelMemberNotifications(channelId, userId, notifications)
	api.recordTime(startTime, "UpdateChannelMemberNotifications")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetGroup(groupId string) (*model.Group, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetGroup(groupId)
	api.recordTime(startTime, "GetGroup")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetGroupByName(name string) (*model.Group, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetGroupByName(name)
	api.recordTime(startTime, "GetGroupByName")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetGroupsForUser(userId string) ([]*model.Group, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetGroupsForUser(userId)
	api.recordTime(startTime, "GetGroupsForUser")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) DeleteChannelMember(channelId, userId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DeleteChannelMember(channelId, userId)
	api.recordTime(startTime, "DeleteChannelMember")
	return _returnsA
}

func (api *apiMetricsWrapper) CreatePost(post *model.Post) (*model.Post, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreatePost(post)
	api.recordTime(startTime, "CreatePost")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) AddReaction(reaction *model.Reaction) (*model.Reaction, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.AddReaction(reaction)
	api.recordTime(startTime, "AddReaction")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) RemoveReaction(reaction *model.Reaction) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.RemoveReaction(reaction)
	api.recordTime(startTime, "RemoveReaction")
	return _returnsA
}

func (api *apiMetricsWrapper) GetReactions(postId string) ([]*model.Reaction, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetReactions(postId)
	api.recordTime(startTime, "GetReactions")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SendEphemeralPost(userId string, post *model.Post) *model.Post {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.SendEphemeralPost(userId, post)
	api.recordTime(startTime, "SendEphemeralPost")
	return _returnsA
}

func (api *apiMetricsWrapper) UpdateEphemeralPost(userId string, post *model.Post) *model.Post {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.UpdateEphemeralPost(userId, post)
	api.recordTime(startTime, "UpdateEphemeralPost")
	return _returnsA
}

func (api *apiMetricsWrapper) DeleteEphemeralPost(userId, postId string) {
	startTime := timePkg.Now()
	api.apiImpl.DeleteEphemeralPost(userId, postId)
	api.recordTime(startTime, "DeleteEphemeralPost")
}

func (api *apiMetricsWrapper) DeletePost(postId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DeletePost(postId)
	api.recordTime(startTime, "DeletePost")
	return _returnsA
}

func (api *apiMetricsWrapper) GetPostThread(postId string) (*model.PostList, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPostThread(postId)
	api.recordTime(startTime, "GetPostThread")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetPost(postId string) (*model.Post, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPost(postId)
	api.recordTime(startTime, "GetPost")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetPostsSince(channelId string, time int64) (*model.PostList, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPostsSince(channelId, time)
	api.recordTime(startTime, "GetPostsSince")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetPostsAfter(channelId, postId string, page, perPage int) (*model.PostList, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPostsAfter(channelId, postId, page, perPage)
	api.recordTime(startTime, "GetPostsAfter")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetPostsBefore(channelId, postId string, page, perPage int) (*model.PostList, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPostsBefore(channelId, postId, page, perPage)
	api.recordTime(startTime, "GetPostsBefore")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetPostsForChannel(channelId string, page, perPage int) (*model.PostList, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPostsForChannel(channelId, page, perPage)
	api.recordTime(startTime, "GetPostsForChannel")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetTeamStats(teamId string) (*model.TeamStats, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetTeamStats(teamId)
	api.recordTime(startTime, "GetTeamStats")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdatePost(post *model.Post) (*model.Post, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdatePost(post)
	api.recordTime(startTime, "UpdatePost")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetProfileImage(userId string) ([]byte, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetProfileImage(userId)
	api.recordTime(startTime, "GetProfileImage")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SetProfileImage(userId string, data []byte) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.SetProfileImage(userId, data)
	api.recordTime(startTime, "SetProfileImage")
	return _returnsA
}

func (api *apiMetricsWrapper) GetEmojiList(sortBy string, page, perPage int) ([]*model.Emoji, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetEmojiList(sortBy, page, perPage)
	api.recordTime(startTime, "GetEmojiList")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetEmojiByName(name string) (*model.Emoji, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetEmojiByName(name)
	api.recordTime(startTime, "GetEmojiByName")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetEmoji(emojiId string) (*model.Emoji, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetEmoji(emojiId)
	api.recordTime(startTime, "GetEmoji")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) CopyFileInfos(userId string, fileIds []string) ([]string, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CopyFileInfos(userId, fileIds)
	api.recordTime(startTime, "CopyFileInfos")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetFileInfo(fileId string) (*model.FileInfo, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetFileInfo(fileId)
	api.recordTime(startTime, "GetFileInfo")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetFile(fileId string) ([]byte, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetFile(fileId)
	api.recordTime(startTime, "GetFile")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetFileLink(fileId string) (string, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetFileLink(fileId)
	api.recordTime(startTime, "GetFileLink")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) ReadFile(path string) ([]byte, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.ReadFile(path)
	api.recordTime(startTime, "ReadFile")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetEmojiImage(emojiId string) ([]byte, string, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB, _returnsC := api.apiImpl.GetEmojiImage(emojiId)
	api.recordTime(startTime, "GetEmojiImage")
	return _returnsA, _returnsB, _returnsC
}

func (api *apiMetricsWrapper) UploadFile(data []byte, channelId string, filename string) (*model.FileInfo, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UploadFile(data, channelId, filename)
	api.recordTime(startTime, "UploadFile")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) OpenInteractiveDialog(dialog model.OpenDialogRequest) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.OpenInteractiveDialog(dialog)
	api.recordTime(startTime, "OpenInteractiveDialog")
	return _returnsA
}

func (api *apiMetricsWrapper) GetPlugins() ([]*model.Manifest, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPlugins()
	api.recordTime(startTime, "GetPlugins")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) EnablePlugin(id string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.EnablePlugin(id)
	api.recordTime(startTime, "EnablePlugin")
	return _returnsA
}

func (api *apiMetricsWrapper) DisablePlugin(id string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DisablePlugin(id)
	api.recordTime(startTime, "DisablePlugin")
	return _returnsA
}

func (api *apiMetricsWrapper) RemovePlugin(id string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.RemovePlugin(id)
	api.recordTime(startTime, "RemovePlugin")
	return _returnsA
}

func (api *apiMetricsWrapper) GetPluginStatus(id string) (*model.PluginStatus, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetPluginStatus(id)
	api.recordTime(startTime, "GetPluginStatus")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) InstallPlugin(file io.Reader, replace bool) (*model.Manifest, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.InstallPlugin(file, replace)
	api.recordTime(startTime, "InstallPlugin")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) KVSet(key string, value []byte) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.KVSet(key, value)
	api.recordTime(startTime, "KVSet")
	return _returnsA
}

func (api *apiMetricsWrapper) KVCompareAndSet(key string, oldValue, newValue []byte) (bool, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.KVCompareAndSet(key, oldValue, newValue)
	api.recordTime(startTime, "KVCompareAndSet")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) KVCompareAndDelete(key string, oldValue []byte) (bool, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.KVCompareAndDelete(key, oldValue)
	api.recordTime(startTime, "KVCompareAndDelete")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) KVSetWithOptions(key string, value []byte, options model.PluginKVSetOptions) (bool, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.KVSetWithOptions(key, value, options)
	api.recordTime(startTime, "KVSetWithOptions")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) KVSetWithExpiry(key string, value []byte, expireInSeconds int64) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.KVSetWithExpiry(key, value, expireInSeconds)
	api.recordTime(startTime, "KVSetWithExpiry")
	return _returnsA
}

func (api *apiMetricsWrapper) KVGet(key string) ([]byte, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.KVGet(key)
	api.recordTime(startTime, "KVGet")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) KVDelete(key string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.KVDelete(key)
	api.recordTime(startTime, "KVDelete")
	return _returnsA
}

func (api *apiMetricsWrapper) KVDeleteAll() *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.KVDeleteAll()
	api.recordTime(startTime, "KVDeleteAll")
	return _returnsA
}

func (api *apiMetricsWrapper) KVList(page, perPage int) ([]string, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.KVList(page, perPage)
	api.recordTime(startTime, "KVList")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) PublishWebSocketEvent(event string, payload map[string]interface{}, broadcast *model.WebsocketBroadcast) {
	startTime := timePkg.Now()
	api.apiImpl.PublishWebSocketEvent(event, payload, broadcast)
	api.recordTime(startTime, "PublishWebSocketEvent")
}

func (api *apiMetricsWrapper) HasPermissionTo(userId string, permission *model.Permission) bool {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.HasPermissionTo(userId, permission)
	api.recordTime(startTime, "HasPermissionTo")
	return _returnsA
}

func (api *apiMetricsWrapper) HasPermissionToTeam(userId, teamId string, permission *model.Permission) bool {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.HasPermissionToTeam(userId, teamId, permission)
	api.recordTime(startTime, "HasPermissionToTeam")
	return _returnsA
}

func (api *apiMetricsWrapper) HasPermissionToChannel(userId, channelId string, permission *model.Permission) bool {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.HasPermissionToChannel(userId, channelId, permission)
	api.recordTime(startTime, "HasPermissionToChannel")
	return _returnsA
}

func (api *apiMetricsWrapper) LogDebug(msg string, keyValuePairs ...interface{}) {
	startTime := timePkg.Now()
	api.apiImpl.LogDebug(msg, keyValuePairs...)
	api.recordTime(startTime, "LogDebug")
}

func (api *apiMetricsWrapper) LogInfo(msg string, keyValuePairs ...interface{}) {
	startTime := timePkg.Now()
	api.apiImpl.LogInfo(msg, keyValuePairs...)
	api.recordTime(startTime, "LogInfo")
}

func (api *apiMetricsWrapper) LogError(msg string, keyValuePairs ...interface{}) {
	startTime := timePkg.Now()
	api.apiImpl.LogError(msg, keyValuePairs...)
	api.recordTime(startTime, "LogError")
}

func (api *apiMetricsWrapper) LogWarn(msg string, keyValuePairs ...interface{}) {
	startTime := timePkg.Now()
	api.apiImpl.LogWarn(msg, keyValuePairs...)
	api.recordTime(startTime, "LogWarn")
}

func (api *apiMetricsWrapper) SendMail(to, subject, htmlBody string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.SendMail(to, subject, htmlBody)
	api.recordTime(startTime, "SendMail")
	return _returnsA
}

func (api *apiMetricsWrapper) CreateBot(bot *model.Bot) (*model.Bot, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.CreateBot(bot)
	api.recordTime(startTime, "CreateBot")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) PatchBot(botUserId string, botPatch *model.BotPatch) (*model.Bot, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.PatchBot(botUserId, botPatch)
	api.recordTime(startTime, "PatchBot")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetBot(botUserId string, includeDeleted bool) (*model.Bot, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetBot(botUserId, includeDeleted)
	api.recordTime(startTime, "GetBot")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) GetBots(options *model.BotGetOptions) ([]*model.Bot, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetBots(options)
	api.recordTime(startTime, "GetBots")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) UpdateBotActive(botUserId string, active bool) (*model.Bot, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.UpdateBotActive(botUserId, active)
	api.recordTime(startTime, "UpdateBotActive")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) PermanentDeleteBot(botUserId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.PermanentDeleteBot(botUserId)
	api.recordTime(startTime, "PermanentDeleteBot")
	return _returnsA
}

func (api *apiMetricsWrapper) GetBotIconImage(botUserId string) ([]byte, *model.AppError) {
	startTime := timePkg.Now()
	_returnsA, _returnsB := api.apiImpl.GetBotIconImage(botUserId)
	api.recordTime(startTime, "GetBotIconImage")
	return _returnsA, _returnsB
}

func (api *apiMetricsWrapper) SetBotIconImage(botUserId string, data []byte) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.SetBotIconImage(botUserId, data)
	api.recordTime(startTime, "SetBotIconImage")
	return _returnsA
}

func (api *apiMetricsWrapper) DeleteBotIconImage(botUserId string) *model.AppError {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.DeleteBotIconImage(botUserId)
	api.recordTime(startTime, "DeleteBotIconImage")
	return _returnsA
}

func (api *apiMetricsWrapper) PluginHTTP(request *http.Request) *http.Response {
	startTime := timePkg.Now()
	_returnsA := api.apiImpl.PluginHTTP(request)
	api.recordTime(startTime, "PluginHTTP")
	return _returnsA
}
